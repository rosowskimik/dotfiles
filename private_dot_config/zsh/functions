# creates an alias and precedes the command with
# sudo if $EUID is not zero.
function salias() {
    emulate -L zsh
    local only=0
    local multi=0
    local key val
    while getopts ":hao" opt; do
        case $opt in
        o) only=1 ;;
        a) multi=1 ;;
        h)
            printf 'usage: salias [-hoa] <alias-expression>\n'
            printf '  -h      shows this help text.\n'
            printf '  -a      replace '\'' ; '\'' sequences with '\'' ; sudo '\''.\n'
            printf '          be careful using this option.\n'
            printf '  -o      only sets an alias if a preceding sudo would be needed.\n'
            return 0
            ;;
        *)
            salias -h >&2
            return 1
            ;;
        esac
    done
    shift "$((OPTIND - 1))"

    if ((${#argv} > 1)); then
        printf 'Too many arguments %s\n' "${#argv}"
        return 1
    fi

    key="${1%%\=*}"
    val="${1#*\=}"
    if ((EUID == 0)) && ((only == 0)); then
        alias -- "${key}=${val}"
    elif ((EUID > 0)); then
        ((multi > 0)) && val="${val// ; / ; sudo }"
        alias -- "${key}=sudo ${val}"
    fi

    return 0
}

function prepend_path() {
    if test -z "$1"; then
        target="$PWD"
    else
        target=$(realpath "$1")
    fi

    if ! test -d "$target"; then
        echo "$target not found"
        return 1
    fi

    case ":$PATH:" in
    *:"$target":*) ;;
    *)
        PATH="${target}${PATH:+:$PATH}"
        ;;
    esac
    export PATH
}

function append_path() {
    if test -z "$1"; then
        target="$PWD"
    else
        target=$(realpath "$1")
    fi

    if ! test -d "$target"; then
        echo "$target not found"
        return 1
    fi

    case ":$PATH:" in
    *:"$target":*) ;;
    *)
        PATH="${PATH:+$PATH:}${target}"
        ;;
    esac
    export PATH
}

function clzg() {
    export LAZYGIT_NEW_DIR_FILE=$XDG_STATE_HOME/lazygit/newdir

    cwd="$(pwd)"
    lazygit "$@"

    if [ -f $LAZYGIT_NEW_DIR_FILE ]; then
        newdir="$(cat $LAZYGIT_NEW_DIR_FILE)"
        if [ $cwd != $newdir ]; then
            cd "$newdir"
        fi
        rm -f $LAZYGIT_NEW_DIR_FILE >/dev/null
    fi
}

function y() {
    local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
    yazi "$@" --cwd-file="$tmp"
    if cwd="$(command cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
        builtin cd -- "$cwd"
    fi
    rm -f -- "$tmp"
}

function leases() {
    if [[ -z $1 ]]; then
        echo "Usage: show-leases <interface>" >&2
        return 1
    fi

    local interface="$1"
    networkctl --json=short status "$interface" | jq -r '
    def bytehex:
      [(./16 | floor), .%16] | map(if . < 10 then 48 + . else . + 55 end) | implode;
    (.DHCPServer.Leases // []) as $leases |
    if ($leases | length > 0) then
      (
        $leases |
        map(
          "Hostname: \(.Hostname)\nMAC: \(.HardwareAddress[:6] | map(bytehex) | join(":"))\nIP: \(.Address | join("."))"
        ) |
        join("\n\n")
      )
    else
      "No Leases"
    end
  '
}

function disasm() {
    gdb --batch --nx -ex "disas/r ${2}" "$1"
}

function nspawn_ci() {
    emulate -L zsh
    setopt typeset_silent

    local mem="" mem_max="" cpu="" io="" machine=""
    local -a passthru property_args bind_args env_args cmd

    # Parse flags + positional <machine>; pass-through after "--"
    while [[ $# -gt 0 ]]; do
        case "$1" in
        --)
            shift
            passthru=("$@")
            break
            ;;
        -h | --help)
            print -r -- "Usage: nspawn_ci [--mem VAL] [--mem-max VAL] [--cpu VAL] [--io VAL] <machine> [-- ...]"
            return 0
            ;;
        --mem=*)
            mem="${1#*=}"
            shift
            ;;
        --mem)
            shift
            mem="${1:-}"
            [[ -z $mem ]] && {
                print -ru2 -- "Missing value for --mem"
                return 2
            }
            ;;
        --mem-max=*)
            mem_max="${1#*=}"
            shift
            ;;
        --mem-max)
            shift
            mem_max="${1:-}"
            [[ -z $mem_max ]] && {
                print -ru2 -- "Missing value for --mem-max"
                return 2
            }
            ;;
        --cpu=*)
            cpu="${1#*=}"
            shift
            ;;
        --cpu)
            shift
            cpu="${1:-}"
            [[ -z $cpu ]] && {
                print -ru2 -- "Missing value for --cpu"
                return 2
            }
            ;;
        --io=*)
            io="${1#*=}"
            shift
            ;;
        --io)
            shift
            io="${1:-}"
            [[ -z $io ]] && {
                print -ru2 -- "Missing value for --io"
                return 2
            }
            ;;
        --*)
            print -ru2 -- "Unknown option: $1 (use -- to pass it to nspawn)"
            return 2
            ;;
        *)
            if [[ -z $machine ]]; then
                machine="$1"
                shift
            else
                print -ru2 -- "Unexpected argument: $1"
                return 2
            fi
            ;;
        esac
    done

    if [[ -z $machine ]]; then
        print -ru2 -- "Error: missing <machine>"
        return 2
    fi

    local dir="/var/lib/machines/${machine}"

    # Resource properties (only set if provided)
    [[ -n $mem ]] && property_args+=("--property=MemoryHigh=${mem}")
    [[ -n $mem_max ]] && property_args+=("--property=MemoryMax=${mem_max}")
    [[ -n $cpu ]] && property_args+=("--property=CPUWeight=${cpu}")
    [[ -n $io ]] && property_args+=("--property=IOWeight=${io}")

    # Binds/env as in your command (added guards so missing vars don't break)
    bind_args+=("--overlay=${HOME}:/home/oci")
    bind_args+=("--bind=${PWD}")
    env_args+=("--setenv=WAYLAND_DISPLAY=${WAYLAND_DISPLAY}")

    if [[ -n ${XDG_RUNTIME_DIR:-} && -d ${XDG_RUNTIME_DIR} ]]; then
        bind_args+=("--bind=${XDG_RUNTIME_DIR}")
        env_args+=("--setenv=XDG_RUNTIME_DIR=${XDG_RUNTIME_DIR}")
    fi
    if [[ -n ${SSH_AUTH_SOCK:-} && -S ${SSH_AUTH_SOCK} ]]; then
        bind_args+=("--bind=${SSH_AUTH_SOCK}")
        env_args+=("--setenv=SSH_AUTH_SOCK=${SSH_AUTH_SOCK}")
    fi

    cmd=(
        sudo systemd-nspawn
        --as-pid2
        --ephemeral
        --suppress-sync=true
        --register=no
        --user="${USER}"
        --background=""
        --chdir="${PWD}"
        --directory="${dir}"
        "${property_args[@]}"
        "${bind_args[@]}"
        "${env_args[@]}"
    )

    if ((${#passthru[@]})); then
        cmd+=("${passthru[@]}")
    fi

    "${cmd[@]}"
}

## END OF FILE #################################################################
# vim:filetype=zsh foldmethod=marker autoindent expandtab shiftwidth=4
# Local variables:
# mode: sh
# End:
